{
    "pipes": [],
    "interfaces": [
        {
            "name": "IColor",
            "id": "interface-IColor-9e55dd970458aa36007fb193b80143630d817ae2efb4032cd315de0c5e4d19ce10e564353363ad3b2288bb199c0a340ca29739c11f30495bdb4cf985c1e041ab",
            "file": "src/color/model/color.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IColor {\r\n    color: string;\r\n}\r\n\r\nexport class ColorModel implements IColor {\r\n    color: string;\r\n    isSelected: boolean;\r\n\r\n    constructor(color: string, isSelected: boolean) {\r\n        this.color = color;\r\n        this.isSelected = isSelected;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "IColorTheme",
            "id": "interface-IColorTheme-e266c087faa0ad69210b210c0e9241d90ef207b07a7766b7ef5afc0338b01cfa903b26bdac094753ef39171bd80081703d428f9d05a06d2ba3d8e8462b985c99",
            "file": "src/color/model/color-theme.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IColor } from './color.model';\r\n\r\nexport interface IColorTheme extends IColor {\r\n    backgroundColor: string;\r\n}\r\n\r\nexport class ColorThemeModel implements IColorTheme {\r\n    color: string;\r\n    backgroundColor: string;\r\n    isSelected: boolean;\r\n\r\n    constructor(color: string, backgroundColor: string, isSelected: boolean) {\r\n        this.color = color;\r\n        this.backgroundColor = backgroundColor;\r\n        this.isSelected = isSelected;\r\n    }\r\n}\r\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "extends": "IColor"
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ColorModel",
            "id": "class-ColorModel-9e55dd970458aa36007fb193b80143630d817ae2efb4032cd315de0c5e4d19ce10e564353363ad3b2288bb199c0a340ca29739c11f30495bdb4cf985c1e041ab",
            "file": "src/color/model/color.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface IColor {\r\n    color: string;\r\n}\r\n\r\nexport class ColorModel implements IColor {\r\n    color: string;\r\n    isSelected: boolean;\r\n\r\n    constructor(color: string, isSelected: boolean) {\r\n        this.color = color;\r\n        this.isSelected = isSelected;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isSelected",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isSelected",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IColor"
            ]
        },
        {
            "name": "ColorThemeModel",
            "id": "class-ColorThemeModel-e266c087faa0ad69210b210c0e9241d90ef207b07a7766b7ef5afc0338b01cfa903b26bdac094753ef39171bd80081703d428f9d05a06d2ba3d8e8462b985c99",
            "file": "src/color/model/color-theme.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IColor } from './color.model';\r\n\r\nexport interface IColorTheme extends IColor {\r\n    backgroundColor: string;\r\n}\r\n\r\nexport class ColorThemeModel implements IColorTheme {\r\n    color: string;\r\n    backgroundColor: string;\r\n    isSelected: boolean;\r\n\r\n    constructor(color: string, backgroundColor: string, isSelected: boolean) {\r\n        this.color = color;\r\n        this.backgroundColor = backgroundColor;\r\n        this.isSelected = isSelected;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "backgroundColor",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isSelected",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "color",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "backgroundColor",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isSelected",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "IColorTheme"
            ]
        },
        {
            "name": "ColorUpdateModel",
            "id": "class-ColorUpdateModel-6d8fc9853dedb7c3025ad70b7dfd80202e3461e00065d0a9f968216f24070128d1940f8f4ee7042be03b7b25d212ae32cc3327be8896b22665caf971c26c3037",
            "file": "src/color/model/color-update.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ColorThemeModel } from \"./color-theme.model\";\r\nimport { ColorModel } from \"./color.model\";\r\n\r\nexport enum ColorUpdateType {\r\n    Font = 'Font',\r\n    Theme = 'Theme'\r\n}\r\n\r\nexport class ColorUpdateModel {\r\n    updateType: ColorUpdateType;\r\n    colors: (ColorModel | ColorThemeModel)[];\r\n\r\n    constructor(updateType: ColorUpdateType, colors: (ColorModel | ColorThemeModel)[]) {\r\n        this.updateType = updateType;\r\n        this.colors = colors;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "updateType",
                        "type": "ColorUpdateType",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colors",
                        "type": "(ColorModel | ColorThemeModel)[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "updateType",
                        "type": "ColorUpdateType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colors",
                        "type": "(ColorModel | ColorThemeModel)[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "colors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(ColorModel | ColorThemeModel)[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "updateType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorUpdateType",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-175dfa3f1cac43aaee21e5993ee863fb89e7588b2dc7bc963d381f67e1747f2a45bda200828b8f99c5f38e3fb253c556e73b81b40fc0abeef28412f54766ad1b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'storybook'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'storybook';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "Angular + Storybook ng run storybook:storybook\n<router-outlet></router-outlet>"
        },
        {
            "name": "CheckmarkComponent",
            "id": "component-CheckmarkComponent-6d4e290d603761106648a028f6dc6e5009d2c58e43aec16f5e1b9989ad5fa4a9581509bda80e3b44c5b4ce66b93b2f10376043c8ed9c082dd4dd3b4611dddba5",
            "file": "src/checkmark/checkmark.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkmark",
            "styleUrls": [
                "./checkmark.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkmark.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-checkmark',\r\n  templateUrl: './checkmark.component.html',\r\n  styleUrls: ['./checkmark.component.scss'],\r\n  standalone: true,\r\n  imports:[CommonModule]\r\n})\r\nexport class CheckmarkComponent { }\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".checkmark {\r\n    border-radius: 50%;\r\n    background-color: #3BAAD5;\r\n}",
                    "styleUrl": "./checkmark.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"white\" class=\"checkmark\" viewBox=\"0 0 16 16\">\r\n    <path d=\"M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z\"/>\r\n</svg>"
        },
        {
            "name": "ColorButtonComponent",
            "id": "component-ColorButtonComponent-7094f70ef6c2aadc2a27e86c8dd859c14a461657fd21872b9a27f94214993503d9570bf6e6844a4fcefea441fde0086b8c88bbb7d3943ff49f4d1ca22d5700b1",
            "file": "src/color/color-button/color-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-button",
            "styleUrls": [
                "./color-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "ColorModel | undefined",
                    "decorators": []
                },
                {
                    "name": "isSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<ColorModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CheckmarkComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ColorModel } from '../model/color.model';\r\nimport { CheckmarkComponent } from 'src/checkmark/checkmark.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-color-button',\r\n  templateUrl: './color-button.component.html',\r\n  styleUrls: ['./color-button.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, CheckmarkComponent]\r\n})\r\nexport class ColorButtonComponent {\r\n  @Input() color: ColorModel | undefined;\r\n  @Input() isSelected: boolean = false;\r\n  @Output() selected = new EventEmitter<ColorModel>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"bootstrap/scss/functions\";\r\n@import \"bootstrap/scss/variables\";\r\n@import \"bootstrap/scss/mixins/breakpoints\";\r\n\r\n.color {\r\n  position: relative;\r\n\r\n  &__square {\r\n    position: relative;\r\n    width: 100%;\r\n    border-radius: 0.18rem;\r\n    border: solid white 1px;\r\n  }\r\n\r\n  &__square:after {\r\n    content: \"\";\r\n    display: block;\r\n    padding-bottom: 100%;\r\n  }\r\n\r\n  .content {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  &__checkmark {\r\n    position: absolute;\r\n    top: -0.25rem;\r\n    right: -0.25rem;\r\n    z-index: 1;\r\n    visibility: visible;\r\n    display: flex;\r\n  }\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n@include media-breakpoint-up(sm) {\r\n  @media screen and (orientation: landscape) {\r\n    .color {\r\n      &__square {\r\n        width: 1.68rem;\r\n        height: 1.68rem;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"color\">\r\n  <app-checkmark\r\n    *ngIf=\"isSelected\"\r\n    class=\"color__checkmark\"\r\n  ></app-checkmark>\r\n  <div\r\n    class=\"color__square\"\r\n    [ngStyle]=\"{ 'background-color': color.color }\"\r\n    (click)=\"selected.emit(color)\"\r\n  ></div>\r\n</div>\r\n"
        },
        {
            "name": "ColorPickerDropdownComponent",
            "id": "component-ColorPickerDropdownComponent-02235fbb68eece3fb659502dfcf64433187e5b56d9a515620870ecfbb6c6521830da109ba846b49ea7424198a05b4d0d22f561920c5f6b36679b4c0c7f7dbaa8",
            "file": "src/color/color-picker/color-picker-dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-picker-dropdown",
            "styleUrls": [
                "./color-picker-dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-picker-dropdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "ColorUpdateModel",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<ColorModel | ColorThemeModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "arrowUp",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "selectedColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorModel | ColorThemeModel | undefined",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "style",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "TextColorUpdateType",
                    "defaultValue": "ColorUpdateType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOpenChange",
                    "args": [
                        {
                            "name": "isOpened",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "isOpened",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectedColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "ColorModel | ColorThemeModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "ColorModel | ColorThemeModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSelectedColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ColorsGridComponent",
                    "type": "component"
                },
                {
                    "name": "ColorsThemeGridComponent",
                    "type": "component"
                },
                {
                    "name": "NgbDropdownModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { ColorThemeModel } from '../model/color-theme.model';\r\nimport { ColorModel } from '../model/color.model';\r\nimport { ColorUpdateModel, ColorUpdateType } from '../model/color-update.model';\r\nimport { ColorsGridComponent } from '../colors-grid/colors-grid.component';\r\nimport { ColorsThemeGridComponent } from '../colors-theme-grid/colors-theme-grid.component';\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-color-picker-dropdown',\r\n  templateUrl: './color-picker-dropdown.component.html',\r\n  styleUrls: ['./color-picker-dropdown.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ColorsGridComponent, \r\n    ColorsThemeGridComponent, \r\n    NgbDropdownModule,\r\n    MatIconModule\r\n  ],\r\n})\r\nexport class ColorPickerDropdownComponent implements OnInit, OnChanges {\r\n  @Input() model!: ColorUpdateModel;\r\n  @Input() label: string = '';\r\n  @Output() selected = new EventEmitter<ColorModel | ColorThemeModel>();\r\n\r\n  protected TextColorUpdateType = ColorUpdateType;\r\n  protected selectedColor: ColorModel | ColorThemeModel | undefined;\r\n  protected arrowUp: boolean = false;\r\n  protected style: string = '';\r\n\r\n  ngOnInit(): void {\r\n    this.setSelectedColor();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['text']) {\r\n      this.setSelectedColor();\r\n    }\r\n  }\r\n\r\n  protected onOpenChange(isOpened: boolean) {\r\n    this.arrowUp = isOpened;\r\n  }\r\n\r\n  protected onSelectedColor(color: ColorModel | ColorThemeModel) {\r\n    this.selectedColor = color;\r\n    this.selected.emit(this.selectedColor);\r\n  }\r\n\r\n  private setSelectedColor() {\r\n    this.selectedColor = this.model.colors.find(c => c.isSelected);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".color-picker {\r\n  &__title {\r\n    display: block;\r\n    color: black;\r\n    margin-bottom: 0.6rem;\r\n  }\r\n\r\n  &__btn-outline-primary {\r\n    box-shadow: none;\r\n    outline: none;\r\n  }\r\n\r\n  &__selected-square {\r\n    width: 1.68rem;\r\n    height: 1.68rem;\r\n    min-height: 1.55rem;\r\n    border-radius: 0.18rem;\r\n    border: solid white 1px;\r\n    font-size: 0.875rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n\r\n  &__arrow {\r\n    color: white;\r\n    font-size: 0.875rem;\r\n  }\r\n\r\n  &__dropdown-menu {\r\n    width: 18.2rem;\r\n    background-color: #303030;\r\n    padding: 0.25rem 0.5rem 0.5rem 0.5rem;\r\n    box-shadow: 0px 10px 14px 0px rgba(0, 0, 0, 0.25);\r\n    margin-top: 4px !important;\r\n    inset: 0px 0px auto auto !important;\r\n  }\r\n\r\n  &__dropdown-toggle {\r\n    height: 2.5rem;\r\n    width: 8.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    background-color: #2d2d2d;\r\n    border: 0;\r\n\r\n    &::after {\r\n      display: none;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-picker-dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div\r\n  ngbDropdown\r\n  class=\"color-picker d-inline-block\"\r\n  (openChange)=\"onOpenChange($event)\"\r\n>\r\n  <label class=\"color-picker__title\">{{ label }}</label>\r\n  <button\r\n    type=\"button\"\r\n    class=\"btn color-picker__btn-outline-primary color-picker__dropdown-toggle\"\r\n    id=\"colorpalette\"\r\n    ngbDropdownToggle\r\n  >\r\n    <div class=\"color-picker__selected\">\r\n      <ng-container [ngSwitch]=\"model.updateType\">\r\n        <div\r\n          *ngSwitchCase=\"ColorUpdateType.Font\"\r\n          class=\"color-picker__selected-square\"\r\n          [ngStyle]=\"{ 'background-color': selectedColor?.color }\"\r\n        ></div>\r\n        <div\r\n          *ngSwitchCase=\"ColorUpdateType.Theme\"\r\n          class=\"color-picker__selected-square\"\r\n          [ngStyle]=\"{\r\n            color: selectedColor?.color,\r\n            'background-color': selectedColor?.backgroundColor\r\n          }\"\r\n        >\r\n          <span>Aa</span>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n    <mat-icon [ngStyle]=\"{'color': 'white'}\" class=\"color-picker__arrow\" *ngIf=\"arrowUp\" fontIcon=\"home\"></mat-icon>\r\n    <mat-icon [ngStyle]=\"{'color': 'white'}\" class=\"color-picker__arrow\" *ngIf=\"!arrowUp\" fontIcon=\"home\"></mat-icon>\r\n  </button>\r\n  <div\r\n    ngbDropdownMenu\r\n    aria-labelledby=\"colorpalette\"\r\n    class=\"color-picker__dropdown-menu\"\r\n  >\r\n    <ng-container [ngSwitch]=\"model.updateType\">\r\n      <app-colors-grid\r\n        *ngSwitchCase=\"ColorUpdateType.Font\"\r\n        [colors]=\"model.colors\"\r\n        (selected)=\"onSelectedColor($event)\"\r\n      ></app-colors-grid>\r\n      <app-colors-theme-grid\r\n        *ngSwitchCase=\"ColorUpdateType.Theme\"\r\n        [colors]=\"model.colors\"\r\n        (selected)=\"onSelectedColor($event)\"\r\n      ></app-colors-theme-grid>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ColorsGridComponent",
            "id": "component-ColorsGridComponent-467ed2653bd7dfd48525ed47cbc5bf82024a901161fa5b6a5a6b594b41b068fcae38fd96881291a287451c2db1e10479143fa494a84462aca20e52ea6ca856c8",
            "file": "src/color/colors-grid/colors-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-colors-grid",
            "styleUrls": [
                "./colors-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./colors-grid.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Array<ColorModel> | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<ColorModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "selected",
                            "type": "ColorModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "ColorModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ColorButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ColorModel } from '../model/color.model';\r\nimport { ColorButtonComponent } from '../color-button/color-button.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-colors-grid',\r\n  templateUrl: './colors-grid.component.html',\r\n  styleUrls: ['./colors-grid.component.scss'],\r\n  standalone: true,\r\n  imports:[CommonModule, ColorButtonComponent]\r\n})\r\nexport class ColorsGridComponent {\r\n  @Input() colors: Array<ColorModel> | undefined;\r\n  @Output() selected = new EventEmitter<ColorModel>();\r\n\r\n  protected select(selected: ColorModel): void {\r\n    this.colors?.forEach(c => {\r\n      if (c.color === selected.color) {\r\n        c.isSelected = true;\r\n      }\r\n      else {\r\n        c.isSelected = false;\r\n      }\r\n    });\r\n\r\n    this.selected.emit(selected);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"bootstrap/scss/functions\";\r\n@import \"bootstrap/scss/variables\";\r\n@import \"bootstrap/scss/mixins/breakpoints\";\r\n\r\n.colors-container {\r\n  &__galery {\r\n    gap: 0.5rem;\r\n    grid-template-columns: repeat(8, 1fr);\r\n  }\r\n}\r\n\r\n@include media-breakpoint-up(sm) {\r\n  @media screen and (orientation: landscape) {\r\n    .colors-container {\r\n      &__galery {\r\n        margin: 0rem;\r\n      }\r\n    }\r\n  }\r\n}",
                    "styleUrl": "./colors-grid.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"colors-container\">\r\n  <div class=\"d-grid colors-container__galery\">\r\n    <div\r\n      *ngFor=\"let color of colors\"\r\n      class=\"col-auto px-0 colors-container__button\"\r\n    >\r\n      <app-color-button\r\n        [color]=\"color\"\r\n        [isSelected]=\"color.isSelected\"\r\n        (selected)=\"select($event)\"\r\n      ></app-color-button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ColorsThemeGridComponent",
            "id": "component-ColorsThemeGridComponent-372662bcdc31210fc2e2b96a8d052f8bb3a6a43a51e22fe1d5269ec13f8da3bbb8c02ff1731cfb3468eb140350014f35bf876ca0f6d30dd2e4082d9cdaec40b0",
            "file": "src/color/colors-theme-grid/colors-theme-grid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-colors-theme-grid",
            "styleUrls": [
                "./colors-theme-grid.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./colors-theme-grid.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Array<ColorThemeModel> | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<ColorThemeModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "select",
                    "args": [
                        {
                            "name": "selected",
                            "type": "ColorThemeModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "ColorThemeModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ColorThemeButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ColorThemeModel } from '../model/color-theme.model';\r\nimport { ColorThemeButtonComponent } from '../color-theme-button/color-theme-button.component';\r\nimport { CommonModule } from '@angular/common';\r\n@Component({\r\n  selector: 'app-colors-theme-grid',\r\n  templateUrl: './colors-theme-grid.component.html',\r\n  styleUrls: ['./colors-theme-grid.component.scss'],\r\n  standalone: true,\r\n  imports:[CommonModule,ColorThemeButtonComponent],\r\n})\r\nexport class ColorsThemeGridComponent {\r\n  @Input() colors: Array<ColorThemeModel> | undefined;\r\n  @Output() selected = new EventEmitter<ColorThemeModel>();\r\n\r\n  protected select(selected: ColorThemeModel): void {\r\n    this.colors?.forEach(c => {\r\n      if (c.color === selected.color && c.backgroundColor === selected.backgroundColor) {\r\n        c.isSelected = true;\r\n      }\r\n      else {\r\n        c.isSelected = false;\r\n      }\r\n    });\r\n\r\n    this.selected.emit(selected);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"bootstrap/scss/functions\";\r\n@import \"bootstrap/scss/variables\";\r\n@import \"bootstrap/scss/mixins/breakpoints\";\r\n\r\n.colors-container {\r\n  &__galery {\r\n    gap: 0.5rem;\r\n    grid-template-columns: repeat(6, 1fr);\r\n  }\r\n}\r\n\r\n@include media-breakpoint-up(sm) {\r\n  @media screen and (orientation: landscape) {\r\n    .colors-container {\r\n      &__galery {\r\n        margin: 0rem;\r\n      }\r\n    }\r\n  }\r\n}",
                    "styleUrl": "./colors-theme-grid.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"colors-container\">\r\n  <div class=\"d-grid colors-container__galery\">\r\n    <div\r\n      *ngFor=\"let color of colors\"\r\n      class=\"col-auto px-0 colors-container__button\"\r\n    >\r\n      <app-color-theme-button\r\n        [color]=\"color\"\r\n        (selected)=\"select($event)\"\r\n      ></app-color-theme-button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ColorThemeButtonComponent",
            "id": "component-ColorThemeButtonComponent-89a65ace7fdd2b2f57f4bf8003508fc62b10e9a4486818c8b79f0d48640841a44fe8e76e73dc469df49720103550bc7660fd8d5834f37217146d8133bde4ecf0",
            "file": "src/color/color-theme-button/color-theme-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-theme-button",
            "styleUrls": [
                "./color-theme-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-theme-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ColorThemeModel | undefined",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "'Aa'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selected",
                    "defaultValue": "new EventEmitter<ColorThemeModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ColorThemeModel } from '../model/color-theme.model';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-color-theme-button',\r\n  templateUrl: './color-theme-button.component.html',\r\n  styleUrls: ['./color-theme-button.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule]\r\n})\r\nexport class ColorThemeButtonComponent {\r\n  @Input() color: ColorThemeModel | undefined;\r\n  @Input() text = 'Aa';\r\n  @Output() selected = new EventEmitter<ColorThemeModel>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"bootstrap/scss/functions\";\r\n@import \"bootstrap/scss/variables\";\r\n@import \"bootstrap/scss/mixins/breakpoints\";\r\n\r\n.color-theme {\r\n  position: relative;\r\n  font-size: 1.25rem;\r\n\r\n  &__square {\r\n    position: relative;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    border-radius: 0.18rem;\r\n    border: solid white 1px;\r\n  }\r\n\r\n  &__square:after {\r\n    content: \"\";\r\n    display: block;\r\n    padding-bottom: 100%;\r\n  }\r\n\r\n  .content {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  &__checkmark {\r\n    position: absolute;\r\n    display: flex;\r\n    top: -0.25rem;\r\n    right: -0.25rem;\r\n    z-index: 1;\r\n    visibility: visible;\r\n  }\r\n\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n}\r\n\r\n@include media-breakpoint-up(sm) {\r\n  @media screen and (orientation: landscape) {\r\n    .color-theme {\r\n      &__square {\r\n        width: 2.43rem;\r\n        height: 2.43rem;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-theme-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"color-theme\">\r\n  <app-checkmark\r\n    *ngIf=\"color.isSelected\"\r\n    class=\"color-theme__checkmark\"\r\n  ></app-checkmark>\r\n  <div\r\n    class=\"color-theme__square\"\r\n    [ngStyle]=\"{\r\n      color: color.color,\r\n      'background-color': color.backgroundColor\r\n    }\"\r\n    (click)=\"selected.emit(color)\"\r\n  >\r\n    <span>{{ text }}</span>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-9ad8a04baf0e282a639fd29db64180035666f09de025642570d8050a4f937b9ed7537963d5c64933391e52f8edd6f82fb7298adb95c41120120d2356d27cf10c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    MatIconModule,\n    NgbModule,  \n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ColorPicker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/color-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    model: model,\n    label: 'Color',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/color-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ColorPickerDropdownComponent>",
                "defaultValue": "{\n  title: 'Color/Picker',\n  component: ColorPickerDropdownComponent,\n  tags: ['autodocs'],\n}"
            },
            {
                "name": "model",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/color-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new ColorUpdateModel(\n    ColorUpdateType.Font, \n    [new ColorModel('#A4A5A7', true), new ColorModel('#00000', false)]\n    )"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ColorPickerDropdownComponent>",
                "file": "src/stories/color-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            }
        ],
        "enumerations": [
            {
                "name": "ColorUpdateType",
                "childs": [
                    {
                        "name": "Font",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Font"
                    },
                    {
                        "name": "Theme",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Theme"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/color/model/color-update.model.ts"
            }
        ],
        "groupedVariables": {
            "src/stories/color-picker.stories.ts": [
                {
                    "name": "ColorPicker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/color-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    model: model,\n    label: 'Color',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/color-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ColorPickerDropdownComponent>",
                    "defaultValue": "{\n  title: 'Color/Picker',\n  component: ColorPickerDropdownComponent,\n  tags: ['autodocs'],\n}"
                },
                {
                    "name": "model",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/color-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new ColorUpdateModel(\n    ColorUpdateType.Font, \n    [new ColorModel('#A4A5A7', true), new ColorModel('#00000', false)]\n    )"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/color/model/color-update.model.ts": [
                {
                    "name": "ColorUpdateType",
                    "childs": [
                        {
                            "name": "Font",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Font"
                        },
                        {
                            "name": "Theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Theme"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/color/model/color-update.model.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/stories/color-picker.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ColorPickerDropdownComponent>",
                    "file": "src/stories/color-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/checkmark/checkmark.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckmarkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/color/color-button/color-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/color/color-picker/color-picker-dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorPickerDropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/color/color-theme-button/color-theme-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorThemeButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/color/colors-grid/colors-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorsGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/color/colors-theme-grid/colors-theme-grid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorsThemeGridComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/color/model/color-theme.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorThemeModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/color/model/color-theme.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IColorTheme",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/color/model/color-update.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorUpdateModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/color/model/color.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/color/model/color.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IColor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/color-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorPicker",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/color-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/color-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "model",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}